// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Poke.Infra.Context;

namespace Poke.Infra.Migrations
{
    [DbContext(typeof(EntityContext))]
    [Migration("20210926202950_CreatePokemon")]
    partial class CreatePokemon
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Poke.Core.Entities.BaseStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PokemonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId")
                        .IsUnique();

                    b.ToTable("base_stats", "dbo");
                });

            modelBuilder.Entity("Poke.Core.Entities.Pokemon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FirstType")
                        .IsRequired()
                        .HasColumnType("varchar")
                        .HasColumnName("first_type");

                    b.Property<decimal>("Height")
                        .HasColumnType("numeric(38,17)")
                        .HasColumnName("height");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<string>("SecondType")
                        .HasColumnType("varchar")
                        .HasColumnName("second_type");

                    b.Property<string>("Species")
                        .HasColumnType("varchar")
                        .HasColumnName("species");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric(38,17)")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("Number");

                    b.ToTable("pokemon", "dbo");
                });

            modelBuilder.Entity("Poke.Core.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BaseFriendship")
                        .HasColumnType("integer")
                        .HasColumnName("base_friendship");

                    b.Property<int>("EVYeld")
                        .HasColumnType("integer")
                        .HasColumnName("ev_yeld");

                    b.Property<int>("GrowthRate")
                        .HasColumnType("integer")
                        .HasColumnName("growth_rate");

                    b.Property<Guid>("PokemonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId")
                        .IsUnique();

                    b.ToTable("training", "dbo");
                });

            modelBuilder.Entity("Poke.Core.Entities.BaseStats", b =>
                {
                    b.HasOne("Poke.Core.Entities.Pokemon", "Pokemon")
                        .WithOne("BaseStats")
                        .HasForeignKey("Poke.Core.Entities.BaseStats", "PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Poke.Core.ValueObjects.Point", "Attack", b1 =>
                        {
                            b1.Property<Guid>("BaseStatsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("attack");

                            b1.HasKey("BaseStatsId");

                            b1.ToTable("base_stats");

                            b1.WithOwner()
                                .HasForeignKey("BaseStatsId");
                        });

                    b.OwnsOne("Poke.Core.ValueObjects.Point", "Defense", b1 =>
                        {
                            b1.Property<Guid>("BaseStatsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("defense");

                            b1.HasKey("BaseStatsId");

                            b1.ToTable("base_stats");

                            b1.WithOwner()
                                .HasForeignKey("BaseStatsId");
                        });

                    b.OwnsOne("Poke.Core.ValueObjects.Point", "HitPoints", b1 =>
                        {
                            b1.Property<Guid>("BaseStatsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("hitpoints");

                            b1.HasKey("BaseStatsId");

                            b1.ToTable("base_stats");

                            b1.WithOwner()
                                .HasForeignKey("BaseStatsId");
                        });

                    b.OwnsOne("Poke.Core.ValueObjects.Point", "SpecialAttack", b1 =>
                        {
                            b1.Property<Guid>("BaseStatsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("special_attack");

                            b1.HasKey("BaseStatsId");

                            b1.ToTable("base_stats");

                            b1.WithOwner()
                                .HasForeignKey("BaseStatsId");
                        });

                    b.OwnsOne("Poke.Core.ValueObjects.Point", "SpecialDefense", b1 =>
                        {
                            b1.Property<Guid>("BaseStatsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("special_defense");

                            b1.HasKey("BaseStatsId");

                            b1.ToTable("base_stats");

                            b1.WithOwner()
                                .HasForeignKey("BaseStatsId");
                        });

                    b.OwnsOne("Poke.Core.ValueObjects.Point", "Speed", b1 =>
                        {
                            b1.Property<Guid>("BaseStatsId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("speed");

                            b1.HasKey("BaseStatsId");

                            b1.ToTable("base_stats");

                            b1.WithOwner()
                                .HasForeignKey("BaseStatsId");
                        });

                    b.Navigation("Attack");

                    b.Navigation("Defense");

                    b.Navigation("HitPoints");

                    b.Navigation("Pokemon");

                    b.Navigation("SpecialAttack");

                    b.Navigation("SpecialDefense");

                    b.Navigation("Speed");
                });

            modelBuilder.Entity("Poke.Core.Entities.Training", b =>
                {
                    b.HasOne("Poke.Core.Entities.Pokemon", "Pokemon")
                        .WithOne("Training")
                        .HasForeignKey("Poke.Core.Entities.Training", "PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("Poke.Core.Entities.Pokemon", b =>
                {
                    b.Navigation("BaseStats");

                    b.Navigation("Training");
                });
#pragma warning restore 612, 618
        }
    }
}
